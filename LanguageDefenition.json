{
  "keywords" : [{
    "lexeme" : "double",
	"regex" : "double$"
	}, {
    "lexeme" : "int",
	"regex" : "int$"
	},{
    "lexeme" : "long",
	"regex" : "long$"
	},{
    "lexeme" : "char",
	"regex" : "char$"
	},{
    "lexeme" : "boolean",
	"regex" : "boolean$"
	}],
  "operators" : [{
    "lexeme" : "equal",
	"regex" : "="
	},{
    "lexeme" : "plus",
	"regex" : "[+][^=]"
	},{
    "lexeme" : "minus",
	"regex" : "[-][^=]"
	},{
    "lexeme" : "multiply",
	"regex" : "[*][^=]"
	},{
    "lexeme" : "divide",
	"regex" : "[/][^=]"
	},{
    "lexeme" : "plusequal",
	"regex" : "[+][=]"
	},{
    "lexeme" : "minusequal",
	"regex" : "[-][=]"
	},{
    "lexeme" : "timesequal",
	"regex" : "[*=]"
	},{
    "lexeme" : "divideequal",
	"regex" : "[/=]"
	}
   ],
   "literals" : [{
    "lexeme" : "intliteral",
	"regex" : "(0|[1-9][_]?[/d]*)[Ll]?"
	},{
    "lexeme" : "doubleliteral",
	"regex" : "[(0|[1-9][/d]*)*[.](0|[1-9][/d]*)"
	}]
	"separators" : [{
    "lexeme" : "semicolon",
	"regex" : ";"
	},{
    "lexeme" : "comma",
	"regex" : ","
	}],
	"identifiers" : [
		{
			"lexeme": "identifier",
			"regex" : "[a-zA-Z][a-zA-Z0-9]*"
		}
	]
}